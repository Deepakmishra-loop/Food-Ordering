{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { getAllPizzaReducer, addPizzaReducer, getPizzaByIdReducer, updatePizzaByIdReducer } from \"./reducers/pizzaReducer\";\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport { registerUserReducer, loginUserReducer, getAllUsersReducer } from \"./reducers/userReducer\";\nimport { placeOrderReducer, getUserOrdersReducer, allUserOrdersReducer } from \"./reducers/orderReducer\";\nconst cartItems = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconst currentUser = localStorage.getItem(\"currentUser\") ? JSON.parse(localStorage.getItem(\"currentUser\")) : null;\nconst rootReducer = combineReducers({\n  getAllPizzaReducer: getAllPizzaReducer,\n  cartReducer: cartReducer,\n  registerUserReducer: registerUserReducer,\n  loginUserReducer: loginUserReducer,\n  placeOrderReducer: placeOrderReducer,\n  getUserOrdersReducer: getUserOrdersReducer,\n  addPizzaReducer: addPizzaReducer,\n  getPizzaByIdReducer: getPizzaByIdReducer,\n  updatePizzaByIdReducer: updatePizzaByIdReducer,\n  allUserOrdersReducer: allUserOrdersReducer,\n  getAllUsersReducer: getAllUsersReducer\n});\nconst initialState = {\n  cartReducer: {\n    cartItems: cartItems\n  },\n  loginUserReducer: {\n    currentUser: currentUser\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/Deepak/Desktop/Pizza/client/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","getAllPizzaReducer","addPizzaReducer","getPizzaByIdReducer","updatePizzaByIdReducer","cartReducer","registerUserReducer","loginUserReducer","getAllUsersReducer","placeOrderReducer","getUserOrdersReducer","allUserOrdersReducer","cartItems","localStorage","getItem","JSON","parse","currentUser","rootReducer","initialState","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACEC,kBADF,EAEEC,eAFF,EAGEC,mBAHF,EAIEC,sBAJF,QAKO,yBALP;AAMA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SACEC,mBADF,EAEEC,gBAFF,EAGEC,kBAHF,QAIO,wBAJP;AAKA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,yBAJP;AAKA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACdC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADc,GAEd,EAFJ;AAIA,MAAMG,WAAW,GAAGJ,YAAY,CAACC,OAAb,CAAqB,aAArB,IAChBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CADgB,GAEhB,IAFJ;AAGA,MAAMI,WAAW,GAAGrB,eAAe,CAAC;AAClCI,EAAAA,kBAAkB,EAAEA,kBADc;AAElCI,EAAAA,WAAW,EAAEA,WAFqB;AAGlCC,EAAAA,mBAAmB,EAAEA,mBAHa;AAIlCC,EAAAA,gBAAgB,EAAEA,gBAJgB;AAKlCE,EAAAA,iBAAiB,EAAEA,iBALe;AAMlCC,EAAAA,oBAAoB,EAAEA,oBANY;AAOlCR,EAAAA,eAAe,EAAEA,eAPiB;AAQlCC,EAAAA,mBAAmB,EAAEA,mBARa;AASlCC,EAAAA,sBAAsB,EAAEA,sBATU;AAUlCO,EAAAA,oBAAoB,EAAEA,oBAVY;AAWlCH,EAAAA,kBAAkB,EAAEA;AAXc,CAAD,CAAnC;AAcA,MAAMW,YAAY,GAAG;AACnBd,EAAAA,WAAW,EAAE;AACXO,IAAAA,SAAS,EAAEA;AADA,GADM;AAInBL,EAAAA,gBAAgB,EAAE;AAChBU,IAAAA,WAAW,EAAEA;AADG;AAJC,CAArB;AAQA,MAAMG,UAAU,GAAG,CAACrB,KAAD,CAAnB;AAEA,MAAMsB,KAAK,GAAGzB,WAAW,CACvBsB,WADuB,EAEvBC,YAFuB,EAGvBnB,mBAAmB,CAACF,eAAe,CAAC,GAAGsB,UAAJ,CAAhB,CAHI,CAAzB;AAKA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n  getAllPizzaReducer,\r\n  addPizzaReducer,\r\n  getPizzaByIdReducer,\r\n  updatePizzaByIdReducer,\r\n} from \"./reducers/pizzaReducer\";\r\nimport { cartReducer } from \"./reducers/cartReducer\";\r\nimport {\r\n  registerUserReducer,\r\n  loginUserReducer,\r\n  getAllUsersReducer,\r\n} from \"./reducers/userReducer\";\r\nimport {\r\n  placeOrderReducer,\r\n  getUserOrdersReducer,\r\n  allUserOrdersReducer,\r\n} from \"./reducers/orderReducer\";\r\nconst cartItems = localStorage.getItem(\"cartItems\")\r\n  ? JSON.parse(localStorage.getItem(\"cartItems\"))\r\n  : [];\r\n\r\nconst currentUser = localStorage.getItem(\"currentUser\")\r\n  ? JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  : null;\r\nconst rootReducer = combineReducers({\r\n  getAllPizzaReducer: getAllPizzaReducer,\r\n  cartReducer: cartReducer,\r\n  registerUserReducer: registerUserReducer,\r\n  loginUserReducer: loginUserReducer,\r\n  placeOrderReducer: placeOrderReducer,\r\n  getUserOrdersReducer: getUserOrdersReducer,\r\n  addPizzaReducer: addPizzaReducer,\r\n  getPizzaByIdReducer: getPizzaByIdReducer,\r\n  updatePizzaByIdReducer: updatePizzaByIdReducer,\r\n  allUserOrdersReducer: allUserOrdersReducer,\r\n  getAllUsersReducer: getAllUsersReducer,\r\n});\r\n\r\nconst initialState = {\r\n  cartReducer: {\r\n    cartItems: cartItems,\r\n  },\r\n  loginUserReducer: {\r\n    currentUser: currentUser,\r\n  },\r\n};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\nexport default store;"]},"metadata":{},"sourceType":"module"}